name: Tag

on:
  push:
    tags:
      - '*'

jobs:
  publish-framework:
    name: Publish Framework
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org'

      - name: PreCache
        run: cat package-lock.json | jq '.version = "0.0.0"' | jq '.packages."".version = "0.0.0"' > package-lock-copy.json

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ./node_modules
            /home/runner/.cache/Cypress
          key: modules-${{ hashFiles('package-lock-copy.json') }}

      - name: PostCache
        run: rm package-lock-copy.json

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Publish Framework
        run: |
          ./node_modules/.bin/vite build
          ./node_modules/.bin/tsc --emitDeclarationOnly
          cp -f LICENSE.md publish
          cp -fR build/framework/ publish/
          cp -f framework/README.md publish/README.md
          cd publish
          VERSION=`cat ../package.json | jq -r '.version'` && cat ../framework/package.json | jq --arg version $VERSION '. +{version: $version}' > package.json
          npm publish --verbose
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  dependency-image:
    name: Dependency Image
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Dependencies
        uses: docker/build-push-action@v4
        with:
          target: dependencies
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  ansible-ui-image:
    name: Ansible UI Image
    needs: dependency-image
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Quay
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: quay.io/ansible/ansible-ui
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}.{{minor}}.{{patch}}

      - name: Build Ansible UI
        uses: docker/build-push-action@v4
        with:
          target: ansible-ui
          # platforms: linux/amd64,linux/arm64
          push: true
          cache-from: type=gha
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  eda-ui-image:
    name: EDA UI Image
    needs: dependency-image
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Quay
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: quay.io/ansible/ansible-ui
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}.{{minor}}.{{patch}}

      - name: Build EDA UI
        uses: docker/build-push-action@v4
        with:
          target: eda-ui
          platforms: linux/amd64,linux/arm64
          push: true
          cache-from: type=gha
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
